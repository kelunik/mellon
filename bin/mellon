#!/usr/bin/env php
<?php

use Amp\CompositeException;
use Amp\File;
use Amp\Http\Client\HttpClientBuilder;
use Amp\Log\ConsoleFormatter;
use Amp\Log\StreamHandler;
use Kelunik\Mellon\Github\GithubEventWatcher;
use Kelunik\Mellon\Storage\FileKeyValueStorage;
use Kelunik\Mellon\Storage\PrefixKeyValueStorage;
use Kelunik\Mellon\Telegram\TelegramClient;
use Kelunik\Mellon\Twitter\TwitterClient;
use Monolog\Logger;
use Monolog\Processor\PsrLogMessageProcessor;
use Psr\Log\LogLevel;
use Revolt\EventLoop;
use Symfony\Component\Yaml\Yaml;
use function Amp\ByteStream\getStderr;

require __DIR__ . "/../vendor/autoload.php";

// First things first, setup logger, so any error can get logged there
$logHandler = new StreamHandler(getStderr(), LogLevel::INFO);
$logHandler->setFormatter(new ConsoleFormatter("%channel%.%level_name%: %message% %context% %extra%\r\n", null, true));

$logger = new Logger("mellon");
$logger->pushHandler($logHandler);
$logger->pushProcessor(new PsrLogMessageProcessor);

$shutdownHandler = static function (string $watcherId, int $signal) use ($logger) {
    static $shuttingDown = false;

    $signalName = $signal === \SIGINT ? 'SIGINT' : 'SIGTERM';

    if ($shuttingDown) {
        $logger->notice("Caught $signalName ($signal), but shutdown is already in progress, please wait...");
        return;
    }

    $logger->notice("Caught $signalName ($signal), stopping the event loop...");

    EventLoop::getDriver()->stop();
};

// It's important to catch SIGINT / SIGTERM, so destructors can run
EventLoop::onSignal(\SIGINT, $shutdownHandler);
EventLoop::onSignal(\SIGTERM, $shutdownHandler);

// TODO: Properly log further exceptions as root causes of the first one.
EventLoop::setErrorHandler(static function (\Throwable $error) use ($logger) {
    $errors = [$error];

    while ($error = \array_shift($errors)) {
        $logger->critical("An uncaught exception: " . $error->getMessage() . "\r\n" . $error->getTraceAsString(), [
            'exception' => $error,
        ]);

        if ($error instanceof CompositeException) {
            $errors = \array_merge($errors, $error->getReasons());
        } elseif ($error->getPrevious()) {
            $errors[] = $error->getPrevious();
        }
    }
});

$logger->notice("Starting up...");

$configPath = __DIR__ . "/../config.yml";
$configContents = File\read($configPath);

$logger->notice("Successfully loaded configuration file.");

$config = Yaml::parse($configContents);

$logger->notice("Successfully parsed loaded configuration.");

$httpClient = HttpClientBuilder::buildDefault();

$defaultTelegramClient = new TelegramClient(
    $httpClient,
    $logger,
    $config['telegram']['auth'],
    $config['telegram']['chat'],
);

$defaultTelegramClient->disableUrlPreview();

$releaseTelegramClient = new TelegramClient(
    $httpClient,
    $logger,
    $config['telegram']['auth'],
    $config['telegram']['release_chat'] ?? $config['telegram']['chat']
);

$twitterClient = new TwitterClient(
    $httpClient,
    $config['twitter']['consumerKey'],
    $config['twitter']['consumerSecret'],
    $config['twitter']['accessToken'],
    $config['twitter']['accessTokenSecret']
);

$storage = new FileKeyValueStorage(__DIR__ . "/../data/mellon.json");

$plugins = [];
$plugins[] = new GithubEventWatcher(
    $logger->withName('github.watch.amphp'),
    $httpClient,
    $defaultTelegramClient,
    $releaseTelegramClient,
    $twitterClient,
    new PrefixKeyValueStorage($storage, 'kelunik.mellon.plugins.githubevents.last-id.amphp.'),
    5,
    $config['github']['clientId'],
    $config['github']['clientSecret'],
    'amphp'
);

$plugins[] = new GithubEventWatcher(
    $logger->withName('github.watch.reactphp'),
    $httpClient,
    $defaultTelegramClient,
    $defaultTelegramClient,
    null,
    new PrefixKeyValueStorage($storage, 'kelunik.mellon.plugins.githubevents.last-id.reactphp.'),
    5,
    $config['github']['clientId'],
    $config['github']['clientSecret'],
    'reactphp'
);

$plugins[] = new GithubEventWatcher(
    $logger->withName('github.watch.revoltphp'),
    $httpClient,
    $defaultTelegramClient,
    $defaultTelegramClient,
    null,
    new PrefixKeyValueStorage($storage, 'kelunik.mellon.plugins.githubevents.last-id.revoltphp.'),
    5,
    $config['github']['clientId'],
    $config['github']['clientSecret'],
    'revoltphp'
);

EventLoop::run();

$logger->notice("Event loop stopped, goodbye!");

exit(0);
